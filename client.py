import asyncio
import websockets
import json
import threading
from datetime import datetime

class ChatClient:
    def __init__(self):
        self.websocket = None
        self.username = None
        self.is_connected = False
    
    async def connect(self, uri):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.websocket = await websockets.connect(uri)
            self.is_connected = True
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def receive_messages(self):
        """–ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async for message in self.websocket:
                data = json.loads(message)
                
                if data.get("type") == "system":
                    print(f"\nüîî {data['text']} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {data.get('clients_count', 0)})")
                elif data.get("type") == "error":
                    print(f"\n‚ùå –û—à–∏–±–∫–∞: {data['text']}")
                else:
                    user = data.get("user", "Unknown")
                    text = data.get("text", "")
                    timestamp = data.get("timestamp", "")
                    print(f"\n[{timestamp}] {user}: {text}")
                
                print("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ", end="", flush=True)
                
        except websockets.exceptions.ConnectionClosed:
            print("\n‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
            self.is_connected = False
    
    async def send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if self.is_connected and self.websocket:
            message = {
                "type": "chat",
                "user": self.username,
                "text": text,
                "timestamp": datetime.now().strftime("%H:%M:%S")
            }
            await self.websocket.send(json.dumps(message))
    
    async def run_chat(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞"""
        self.username = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ")
        
        if not await self.connect("ws://localhost:8765"):
            return
        
        print(f"\nüéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, {self.username}!")
        print("üí° –ö–æ–º–∞–Ω–¥—ã:")
        print("   - –ù–∞–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        print("   - –í–≤–µ–¥–∏—Ç–µ '/exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("-" * 40)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
        receive_task = asyncio.create_task(self.receive_messages())
        
        try:
            while self.is_connected:
                message_text = await asyncio.get_event_loop().run_in_executor(
                    None, input, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "
                )
                
                if message_text.lower() == '/exit':
                    break
                
                if message_text.strip():
                    await self.send_message(message_text)
                
        except KeyboardInterrupt:
            print("\n–í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞...")
        finally:
            self.is_connected = False
            receive_task.cancel()
            if self.websocket:
                await self.websocket.close()

async def main():
    client = ChatClient()
    await client.run_chat()

if __name__ == "__main__":
    asyncio.run(main())